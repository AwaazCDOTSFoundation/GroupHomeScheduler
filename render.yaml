services:
  - type: web
    name: grouphomescheduler
    env: python
    region: ohio
    plan: free
    buildCommand: |
      pip install -r requirements.txt psycopg2-binary==2.9.9
      python -c "
      import time
      from sqlalchemy import create_engine, text
      import os

      # Wait for database to be ready
      time.sleep(10)
      
      # Get database URL from environment
      db_url = os.environ.get('DATABASE_URL')
      if db_url.startswith('postgres://'):
          db_url = db_url.replace('postgres://', 'postgresql://', 1)
      
      # Create engine
      engine = create_engine(db_url)
      
      print('Connecting to database...')
      with engine.connect() as conn:
          # Drop all tables forcefully
          print('Dropping all tables forcefully...')
          conn.execute(text('DROP SCHEMA public CASCADE;'))
          conn.execute(text('CREATE SCHEMA public;'))
          conn.execute(text('GRANT ALL ON SCHEMA public TO public;'))
          print('Database reset complete!')
      "
    startCommand: |
      python -c "
      from app import create_app, db
      from app.models import Caregiver, Shift
      from datetime import datetime, timedelta
      import time
      
      print('Starting database initialization...')
      app = create_app()
      
      # Wait for database to be ready
      time.sleep(5)
      
      with app.app_context():
          print('Creating all tables...')
          db.create_all()
          
          print('Creating caregivers...')
          caregivers = ['MB', 'Teontae', 'MG', 'Amanda', 'Michelle', 'Fatima', 'Kisha']
          for name in caregivers:
              print(f'Adding caregiver: {name}')
              caregiver = Caregiver(name=name)
              db.session.add(caregiver)
          db.session.commit()
          
          print('Creating shifts...')
          weekly_pattern = {
              0: {  # Monday
                  'A': 'MB',
                  'G1': 'Teontae',
                  'G2': 'MG',
                  'B': 'Amanda',
                  'C': 'Michelle'
              },
              1: {  # Tuesday
                  'A': 'Fatima',
                  'G1': 'MG',
                  'G2': 'Teontae',
                  'B': 'Michelle',
                  'C': 'Kisha'
              },
              2: {  # Wednesday
                  'A': 'MB',
                  'G1': 'MG',
                  'G2': 'Teontae',
                  'B': 'Kisha',
                  'C': 'Amanda'
              },
              3: {  # Thursday
                  'A': 'Fatima',
                  'G1': 'MB',
                  'G2': 'Teontae',
                  'B': 'Kisha',
                  'C': 'Amanda'
              },
              4: {  # Friday
                  'A': 'MB',
                  'G1': 'Kisha',
                  'G2': 'Teontae',
                  'B': 'Fatima',
                  'C': 'Amanda'
              },
              5: {  # Saturday
                  'A': 'MG',
                  'G2': 'Teontae',
                  'G1': 'Fatima',
                  'B': 'Kisha',
                  'C': 'Michelle'
              },
              6: {  # Sunday
                  'A': 'MG',
                  'G2': 'Teontae',
                  'G1': 'Michelle',
                  'B': 'Fatima',
                  'C': 'Amanda'
              }
          }
          
          print('Getting caregiver IDs...')
          caregivers = {c.name: c.id for c in Caregiver.query.all()}
          print(f'Caregiver IDs: {caregivers}')
          
          current_date = datetime(2025, 4, 7)
          end_date = datetime(2025, 5, 31)
          
          print('Creating shifts from {current_date} to {end_date}...')
          while current_date <= end_date:
              day_pattern = weekly_pattern[current_date.weekday()]
              for shift_type, caregiver_name in day_pattern.items():
                  if not (caregiver_name == 'Amanda' and datetime(2025, 4, 28) <= current_date <= datetime(2025, 5, 2)):
                      print(f'Adding shift: {current_date.date()} - {shift_type} - {caregiver_name}')
                      shift = Shift(
                          date=current_date.date(),
                          shift_type=shift_type,
                          caregiver_id=caregivers[caregiver_name]
                      )
                      db.session.add(shift)
              current_date += timedelta(days=1)
          
          db.session.commit()
          print('Database initialization complete!')
          
          # Verify the data
          print('Verifying data...')
          all_caregivers = Caregiver.query.all()
          print(f'Caregivers in database: {[c.name for c in all_caregivers]}')
          shift_count = Shift.query.count()
          print(f'Total shifts created: {shift_count}')
      " && gunicorn wsgi:app
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: grouphomescheduler-db
          property: connectionString
      - key: FLASK_APP
        value: wsgi.py
      - key: FLASK_ENV
        value: production
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PYTHON_VERSION
        value: "3.11.0"
      - key: GUNICORN_WORKERS
        value: "4"
      - key: GUNICORN_TIMEOUT
        value: "120"
    autoDeploy: true
    healthCheckPath: /
    disk:
      name: group-home-scheduler-data
      mountPath: /data
      sizeGB: 1

databases:
  - name: grouphomescheduler-db
    databaseName: grouphomescheduler
    user: grouphomescheduler
    plan: free
    ipAllowList: [] 